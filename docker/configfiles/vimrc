set mouse=r
set guifont=Monospace
set si 					"Smart indent see help
set ai 					"Auto indent Copy indent from current line when starting a new line
set shiftwidth=4 		"Number of spaces to use for each step of (auto)indent
set softtabstop=4
set tabstop=4   		"Number of spaces that a <Tab> in the file counts for
autocmd FileType yaml setlocal shiftwidth=2 softtabstop=2 tabstop=2
set expandtab           "set tab to spaces
set smarttab     		"When on, a <Tab> in front of a line inserts blanks according to
set backspace=2			"Fix BS issue
set hidden
au BufRead,BufNewFile *.tex syntax spell toplevel " enable spelling without sections
colorscheme desert
nnoremap <silent><Up> gk
nnoremap <silent><Down> gj
vnoremap <silent><Up> gk
vnoremap <silent><Down> gj
inoremap <silent><Up> <C-o>gk
inoremap <silent><Down> <C-o>gj
set display+=lastline "prevent @ when a line doesn't fit on screen
" ---------------------------------------
set nocompatible
filetype off
set rtp+=/etc/vim/bundle/Vundle.vim
call vundle#begin('/etc/vim/bundle/')
    Plugin 'Vundle.vim'
    Plugin 'ycmconf'
    Plugin 'YouCompleteMe'
        set encoding=utf-8
        let g:ycm_key_list_select_completion = ['<C-n>']
        let g:ycm_key_list_previous_completion = ['<C-p>']
        let g:ycm_python_binary_path='/usr/bin/python3'
        let g:ycm_enable_diagnostic_signs=0
        let g:ycm_enable_diagnostic_highlighting=0
        let g:ycm_confirm_extra_conf = 1
        let g:SuperTabDefaultCompletionType = '<C-n>'
    Plugin 'vim-latex'
    " ------- tagbar -------
    Plugin 'tagbar'
    map  <F4>          :TagbarToggle<CR>
        "let g:tagbar_ctags_options = ['C:\Users\Administrator\.ctags']
        "let g:tagbar_type_xml = {
        "            \ 'kinds' : ['j:joints', 'l:links', 'p:properties', 'm:macros', 'i:includes', 'n:nodes']
        "            \}
        " ------- bufer exampler -------
    Plugin 'bufexplorer'
    " ------- ale -------
    Plugin 'ale'
        let g:ale_completion_enabled = 0
        let g:ale_fixers = {'python': ['autopep8'], 'cpp': ['clang-format'], 'cmake': ['cmakeformat'], 'xml':['xmllint'], 'javascript':['prettier'], '*':['remove_trailing_lines', 'trim_whitespace'], 'json':['jq'], 'yaml':['prettier', 'yamlfix']}
        let g:ale_linters = {'python': ['pylint', 'flake8', 'prospector'],'xml':['xmllint'], 'cpp':['clangtidy', 'cc']}
        let g:ale_yaml_yamllint_options='-c /etc/vim/yamllint.yaml'
        let g:ale_c_clangformat_executable='clang-format-10'
        let g:ale_cpp_clangtidy_executable='clang-tidy'
        let g:ale_cpp_clangtidy_extra_options=''
        let g:ale_cpp_cc_options='-I ''/opt/ros/noetic/include'' -I ''/usr/include/eigen3'' -I ''/catkinws/common_packages/src/moveit_grasps/include'' -I ''/catkinws/common_packages/src/urdf2collisionobject/include'''
        let g:ale_sign_error = 'E'
        let g:ale_sign_warning = 'W'
        let g:ale_lint_on_text_changed = 'never'
        let g:ale_lint_on_enter = 1
        let g:ale_lint_on_insert_leave = 1
        let g:ale_fix_on_save = 1
        let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")'"
    " ------- vim-substitute -------
    Plugin 'vim-substitute'
        let g:substitute_SingleWordSize=100
    Plugin 'ultisnips'
        let g:UltiSnipsExpandTrigger = "<c-j>"
        let g:UltiSnipsJumpForwardTrigger = "<c-n>"
        let g:UltiSnipsJumpBackwardTrigger = "<c-p>"
    Plugin 'vim-snippets'
    Plugin 'vim-fugitive'
    Plugin 'xmledit'
    Plugin 'vimspector'
        let g:vimspector_enable_mappings = 'HUMAN'
    Plugin 'nerdtree'
    Plugin 'nerdtree-git-plugin'
    Plugin 'vim-interestingwords'
    Plugin 'vim-doge'
        let g:doge_doc_standard_python = 'numpy'
        let g:doge_enable_mappings = 1
call vundle#end()
filetype plugin indent on
filetype plugin on
" ----------------------------------------------------
" ---------------- Status Line -----------------------
" ----------------------------------------------------
function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'('.l:branchname.')':''
endfunction

" jamessan's
set laststatus=2
set statusline=   " clear the statusline for when vimrc is reloaded
set statusline+=%1*[\ WS00\ ]%*
"set statusline+=%{StatuslineGit()}
set statusline+=%-2.2n                       " buffer number
set statusline+=%t\                          " tail of file name
set statusline+=%h%m%r%w                     " flags
set statusline+=[
"set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
"set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
set statusline+=%{&fileformat}]               " file format
set statusline+=%=                            " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  "show hi
set statusline+={%b,0x%B}\                   " current char
set statusline+=(%(%l,%c%V%))\ %<%P        " offset

" ----------------------------------------------------
" ---------------- Sentece for each line format ------
" ----------------------------------------------------
function! MyFormatExpr(start, end)
  silent execute a:start.','.a:end.'j'
  silent execute a:start.','.a:end.'s/\(e\.g\|\<al\|i\.e\)\@<![.!?]\zs /\r/g'
"\zs     Matches at any position, and sets the start of the match there: The
"        next char is the first char of the whole match. /zero-width
"        I.E. This only substitute the space after [.!?]
  silent execute a:start.','.a:end.'g/^\s*$/d'
"\s      whitespace character: <Space> and <Tab>
endfunction

set formatexpr=MyFormatExpr(v:lnum,v:lnum+v:count-1)
